# Makefile for dungeon for Lattice/SAS C
# by Ethan Dicks (erd@cis.ohio-state.edu) 22-May-1991

# Define compiler and linker
CC = lc
LINK = blink

# The dungeon program provides a ``more'' facility which tries to
# figure out how many rows the terminal has.  Several mechanisms are
# supported for determining this; the most common one has been left
# uncommented.  If you have trouble, especially when linking, you may
# have to select a different option.

# more option 1: use the termcap routines.  On some systems the LIBS
# variable may need to be set to -lcurses.  On some it may need to
# be /usr/lib/termcap.o.  These options are commented out below.
#LIBS = -ltermcap
#TERMFLAG =
# LIBS = -lcurses
# LIBS = /usr/lib/termcap.o

# more option 2: use the terminfo routines.  On some systems the LIBS
# variable needs to be -lcursesX, but probably all such systems support
# the termcap routines (option 1) anyhow.
# LIBS = -lcurses
# TERMFLAG = -DMORE_TERMINFO

# more option 3: assume all terminals have 24 rows
LIBS =
TERMFLAG = -DMORE_24

# more option 4: don't use the more facility at all
# LIBS =
# TERMFLAG = -DMORE_NONE

# End of more options

# Uncomment the following line if you want to have access to the game
# debugging tool.  This is invoked by typing "gdt".  It is not much
# use except for debugging.
# GDTFLAG = -DALLOW_GDT

# Compilation flags
# On Lattice C 5.0x, the const type qualifier does not work correctly
# when using lc.
CFLAGS= -Dconst= -O

##################################################################

# Source files
CSRC =	actors.c ballop.c clockr.c demons.c dgame.c dinit.c dmain.c\
	dso1.c dso2.c dso3.c dso4.c dso5.c dso6.c dso7.c dsub.c dverb1.c\
	dverb2.c gdt.c lightp.c local.c nobjs.c np.c np1.c np2.c np3.c\
	nrooms.c objcts.c rooms.c sobjs.c supp.c sverbs.c verbs.c villns.c

# Object files
OBJS =	actors.o ballop.o clockr.o demons.o dgame.o dinit.o dmain.o\
	dso1.o dso2.o dso3.o dso4.o dso5.o dso6.o dso7.o dsub.o dverb1.o\
	dverb2.o gdt.o lightp.o local.o	nobjs.o np.o np1.o np2.o np3.o\
	nrooms.o objcts.o rooms.o sobjs.o supp.o sverbs.o verbs.o villns.o

dungeon: $(OBJS)
	$(LINK) with dungeon.lnk

dinit.o: dinit.c funcs.h vars.h
	$(CC) $(CFLAGS) $(GDTFLAG) dinit.c

dgame.o: dgame.c funcs.h vars.h
	$(CC) $(CFLAGS) $(GDTFLAG) dgame.c

gdt.o: gdt.c funcs.h vars.h
	$(CC) $(CFLAGS) $(GDTFLAG)  gdt.c

local.o: local.c funcs.h vars.h
	$(CC) $(CFLAGS) $(GDTFLAG)  local.c

supp.o: supp.c funcs.h vars.h
	$(CC) $(CFLAGS) $(TERMFLAG)  supp.c	

actors.o: funcs.h vars.h
	$(CC) $(CFLAGS)  actors.c

ballop.o: funcs.h vars.h
	$(CC) $(CFLAGS)  ballop.c

clockr.o: funcs.h vars.h
	$(CC) $(CFLAGS)  clockr.c

demons.o: funcs.h vars.h
	$(CC) $(CFLAGS)  demons.c

dmain.o: funcs.h vars.h
	$(CC) $(CFLAGS)  dmain.c

dso1.o: funcs.h vars.h
	$(CC) $(CFLAGS)  dso1.c

dso2.o: funcs.h vars.h
	$(CC) $(CFLAGS)  dso2.c

dso3.o: funcs.h vars.h
	$(CC) $(CFLAGS)  dso3.c

dso4.o: funcs.h vars.h
	$(CC) $(CFLAGS)  dso4.c

dso5.o: funcs.h vars.h
	$(CC) $(CFLAGS)  dso5.c

dso6.o: funcs.h vars.h
	$(CC) $(CFLAGS)  dso6.c

dso7.o: funcs.h vars.h
	$(CC) $(CFLAGS)  dso7.c

dsub.o: funcs.h vars.h
	$(CC) $(CFLAGS)  dsub.c

dverb1.o: funcs.h vars.h
	$(CC) $(CFLAGS)  dverb1.c

dverb2.o: funcs.h vars.h
	$(CC) $(CFLAGS)  dverb2.c

lightp.o: funcs.h vars.h
	$(CC) $(CFLAGS)  lightp.c

nobjs.o: funcs.h vars.h
	$(CC) $(CFLAGS)  nobjs.c

np.o: funcs.h vars.h
	$(CC) $(CFLAGS)  np.c

np1.o: funcs.h vars.h parse.h
	$(CC) $(CFLAGS)  np1.c

np2.o: funcs.h vars.h parse.h
	$(CC) $(CFLAGS)  np2.c

np3.o: funcs.h vars.h parse.h
	$(CC) $(CFLAGS)  np3.c

nrooms.o: funcs.h vars.h
	$(CC) $(CFLAGS)  nrooms.c

objcts.o: funcs.h vars.h
	$(CC) $(CFLAGS)  objcts.c

rooms.o: funcs.h vars.h
	$(CC) $(CFLAGS)  rooms.c

sobjs.o: funcs.h vars.h
	$(CC) $(CFLAGS)  sobjs.c

sverbs.o: funcs.h vars.h
	$(CC) $(CFLAGS)  sverbs.c

verbs.o: funcs.h vars.h
	$(CC) $(CFLAGS)  verbs.c

villns.o: funcs.h vars.h
	$(CC) $(CFLAGS)  villns.c
